/**
 * This script is for patching a Mac application bundle.
 * The bundle generated by cargo-bundle contains no dependency at all,
 * this script
 * - Copies all the dylib dependencies into the bundle
 * - Updates the libraries' search path
 * - Codesigns with adhoc identity
 */

const FS = require('fs');
const PATH = require('path');
const CP = require('child_process');

function findDependencies(path) {
    const output = CP.execSync(`otool -L ${path}`, {encoding: 'utf-8'});

    const result = [];
    const lines = output.split('\n');
    for (const line of lines) {
        const match = line.match(/\s(.*) \(compatibility/);
        if (!match) continue;
        result.push(match[1]);
    }
    return result;
}

function isPathFromSystem(path) {
    return path.startsWith('/System') || path.startsWith('/usr');
}

function isPathRelative(path) {
    return path.startsWith('@');
}

function findNonSystemDependencies(path) {
    return findDependencies(path).filter(p => !isPathFromSystem(p) && !isPathRelative(p));
}

function patchBinary(binPath, dependencyPath) {
    const filename = PATH.basename(dependencyPath);
    const relatvePath = `@executable_path/../Resources/lib/${filename}`;
    const command = `install_name_tool -change ${dependencyPath} ${relatvePath} ${binPath}`;
    console.log(`Running ${command}`);
    CP.execSync(command);
}

if (process.argv.length < 3) {
    console.log('Usage: node patch-dependencies.js ./gdt2dicom-gui.app/Contents/MacOS/gdt2dicom-gui-bin');
}
const input = process.argv[2];
const pendings = [input];
const processed = new Set();
const processedDest = new Set();

const libFolder = PATH.resolve(input, '../../Resources/lib/');
if (!FS.existsSync(libFolder)) {
    console.log(`Making folder ${libFolder}`);
    FS.mkdirSync(libFolder, {recursive: true});
}

while (pendings.length) {
    const currentPath = pendings.shift();
    if (processed.has(currentPath)) continue;

    const needCopy = currentPath.endsWith('.dylib');
    const filename = PATH.basename(currentPath);
    let pathToPatch = null;
    if (needCopy) {
        const dest = PATH.join(libFolder, filename);
        console.log(`Copying ${currentPath} -> ${dest}`);
        if (FS.existsSync(dest)) {
            console.warn(`${dest} already exist`);
        } else {
            FS.copyFileSync(currentPath, dest);
        }
        pathToPatch = dest;
    } else {
        pathToPatch = currentPath;
    }

    const dependencies = findNonSystemDependencies(pathToPatch);
    for (const dependency of dependencies) {
        patchBinary(pathToPatch, dependency);
        pendings.push(dependency);
    }
    processed.add(currentPath);
    processedDest.add(pathToPatch);
}

console.log('codesigning...');


for (const p of processedDest) {
    const command = `codesign -fs "-" --deep ${p}`;
    console.log(`Running: ${command}`);
    CP.execSync(command);
}

console.log('Done');
